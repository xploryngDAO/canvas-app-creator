import { database, ProjectVersion } from './database';

/**
 * Servi√ßo respons√°vel pelo versionamento autom√°tico de projetos
 * Salva automaticamente cada altera√ß√£o feita pelo AICopilot como uma nova vers√£o
 */
export class VersioningService {
  /**
   * Salva uma nova vers√£o automaticamente no banco de dados
   * @param projectId ID do projeto atual
   * @param userPrompt Prompt original do usu√°rio
   * @param modifiedCode C√≥digo HTML modificado pela IA
   * @returns ID da vers√£o criada
   */
  async saveVersionAutomatically(
    projectId: string,
    userPrompt: string,
    modifiedCode: string
  ): Promise<string> {
    try {
      console.log('üîç [VERSIONING] Iniciando salvamento de vers√£o:', {
        projectId,
        userPrompt: userPrompt.substring(0, 50) + '...',
        codeLength: modifiedCode.length
      });

      // Verificar se o projeto existe no banco de dados
      const projectExists = await this.ensureProjectExists(projectId, modifiedCode);
      
      if (!projectExists) {
        throw new Error(`N√£o foi poss√≠vel criar ou encontrar o projeto: ${projectId}`);
      }

      // Obter pr√≥ximo n√∫mero de vers√£o
      const nextVersion = await this.getNextVersionNumber(projectId);
      
      console.log('üîç [VERSIONING] Criando vers√£o:', {
        projectId,
        versionNumber: nextVersion,
        promptLength: userPrompt.length,
        codeLength: modifiedCode.length
      });

      // Criar vers√£o no banco de dados
      const versionId = await database.createVersion({
        project_id: projectId,
        version_number: nextVersion,
        prompt: userPrompt,
        code: modifiedCode
      });
      
      console.log(`‚úÖ [VERSIONING] Vers√£o ${nextVersion} salva automaticamente para projeto ${projectId}:`, {
        versionId,
        projectId,
        versionNumber: nextVersion
      });
      
      return versionId;
    } catch (error) {
      console.error('‚ùå [VERSIONING] Erro ao salvar vers√£o automaticamente:', error);
      throw new Error(`Falha ao salvar vers√£o: ${error.message}`);
    }
  }

  /**
   * Garante que o projeto existe no banco de dados
   * Se n√£o existir, cria um projeto tempor√°rio
   * @param projectId ID do projeto
   * @param code C√≥digo atual do projeto
   * @returns true se o projeto existe ou foi criado com sucesso
   */
  private async ensureProjectExists(projectId: string, code: string): Promise<boolean> {
    try {
      console.log('üîç [VERSIONING] Verificando se projeto existe:', projectId);
      
      // Tentar buscar o projeto
      const project = await database.getProject(projectId);
      
      if (project) {
        console.log('‚úÖ [VERSIONING] Projeto encontrado no banco:', projectId);
        return true;
      }

      console.log('‚ö†Ô∏è [VERSIONING] Projeto n√£o encontrado, criando projeto tempor√°rio:', projectId);

      // Se o projeto n√£o existe, criar um projeto tempor√°rio
      const isTemporary = projectId.startsWith('temp_');
      const projectTitle = isTemporary 
        ? `Projeto Tempor√°rio - ${new Date().toLocaleString()}`
        : `Projeto ${projectId}`;

      const newProjectId = await database.createProject({
        user_id: 'default_user', // ID padr√£o para projetos tempor√°rios
        title: projectTitle,
        description: isTemporary 
          ? 'Projeto criado automaticamente pelo AICopilot'
          : 'Projeto criado durante versionamento',
        config: {},
        code: code
      });

      console.log('‚úÖ [VERSIONING] Projeto tempor√°rio criado:', {
        originalId: projectId,
        newProjectId,
        title: projectTitle
      });

      return true;
    } catch (error) {
      console.error('‚ùå [VERSIONING] Erro ao verificar/criar projeto:', error);
      return false;
    }
  }

  /**
   * Obt√©m o pr√≥ximo n√∫mero de vers√£o para um projeto
   * @param projectId ID do projeto
   * @returns Pr√≥ximo n√∫mero de vers√£o (incrementado)
   */
  private async getNextVersionNumber(projectId: string): Promise<number> {
    try {
      const versions = await database.getVersions(projectId);
      
      console.log('üîç [VERSIONING] Vers√µes existentes:', {
        projectId,
        count: versions.length,
        versions: versions.map(v => ({ id: v.id, version: v.version_number }))
      });
      
      if (versions.length === 0) {
        console.log('üîç [VERSIONING] Primeira vers√£o para o projeto');
        return 1; // Primeira vers√£o
      }
      
      // Encontrar o maior n√∫mero de vers√£o e incrementar
      const maxVersion = Math.max(...versions.map(v => v.version_number));
      const nextVersion = maxVersion + 1;
      
      console.log('üîç [VERSIONING] Pr√≥xima vers√£o calculada:', {
        maxVersion,
        nextVersion
      });
      
      return nextVersion;
    } catch (error) {
      console.error('‚ùå [VERSIONING] Erro ao obter pr√≥ximo n√∫mero de vers√£o:', error);
      console.log('üîÑ [VERSIONING] Usando vers√£o 1 como fallback');
      return 1; // Fallback para primeira vers√£o
    }
  }

  /**
   * Obt√©m todas as vers√µes de um projeto
   * @param projectId ID do projeto
   * @returns Lista de vers√µes do projeto
   */
  async getProjectVersions(projectId: string): Promise<ProjectVersion[]> {
    try {
      console.log('üîç [VERSIONING] Buscando vers√µes do projeto:', projectId);
      const versions = await database.getVersions(projectId);
      
      console.log('‚úÖ [VERSIONING] Vers√µes encontradas:', {
        projectId,
        count: versions.length
      });
      
      return versions;
    } catch (error) {
      console.error('‚ùå [VERSIONING] Erro ao obter vers√µes do projeto:', error);
      return [];
    }
  }

  /**
   * Obt√©m a √∫ltima vers√£o de um projeto
   * @param projectId ID do projeto
   * @returns √öltima vers√£o do projeto ou null se n√£o houver vers√µes
   */
  async getLatestVersion(projectId: string): Promise<ProjectVersion | null> {
    try {
      const versions = await this.getProjectVersions(projectId);
      
      if (versions.length === 0) {
        console.log('‚ö†Ô∏è [VERSIONING] Nenhuma vers√£o encontrada para o projeto:', projectId);
        return null;
      }
      
      // Retornar a vers√£o com maior n√∫mero
      const latestVersion = versions.reduce((latest, current) => 
        current.version_number > latest.version_number ? current : latest
      );
      
      console.log('‚úÖ [VERSIONING] √öltima vers√£o encontrada:', {
        projectId,
        versionId: latestVersion.id,
        versionNumber: latestVersion.version_number
      });
      
      return latestVersion;
    } catch (error) {
      console.error('‚ùå [VERSIONING] Erro ao obter √∫ltima vers√£o:', error);
      return null;
    }
  }

  /**
   * Verifica se um projeto tem vers√µes
   * @param projectId ID do projeto
   * @returns true se o projeto tem vers√µes, false caso contr√°rio
   */
  async hasVersions(projectId: string): Promise<boolean> {
    try {
      const versions = await this.getProjectVersions(projectId);
      const hasVersions = versions.length > 0;
      
      console.log('üîç [VERSIONING] Verifica√ß√£o de vers√µes:', {
        projectId,
        hasVersions,
        count: versions.length
      });
      
      return hasVersions;
    } catch (error) {
      console.error('‚ùå [VERSIONING] Erro ao verificar se projeto tem vers√µes:', error);
      return false;
    }
  }

  /**
   * Valida se os dados necess√°rios est√£o presentes para criar uma vers√£o
   * @param projectId ID do projeto
   * @param userPrompt Prompt do usu√°rio
   * @param code C√≥digo do projeto
   * @returns true se os dados s√£o v√°lidos
   */
  private validateVersionData(projectId: string, userPrompt: string, code: string): boolean {
    const isValid = !!(projectId && userPrompt && code);
    
    if (!isValid) {
      console.error('‚ùå [VERSIONING] Dados inv√°lidos para cria√ß√£o de vers√£o:', {
        hasProjectId: !!projectId,
        hasUserPrompt: !!userPrompt,
        hasCode: !!code,
        projectId,
        promptLength: userPrompt?.length || 0,
        codeLength: code?.length || 0
      });
    }
    
    return isValid;
  }
}

// Inst√¢ncia singleton do servi√ßo de versionamento
export const versioningService = new VersioningService();